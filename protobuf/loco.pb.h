// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loco.proto

#ifndef PROTOBUF_loco_2eproto__INCLUDED
#define PROTOBUF_loco_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace locofs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_loco_2eproto();
void protobuf_AssignDesc_loco_2eproto();
void protobuf_ShutdownFile_loco_2eproto();

class filename;
class objectname;

// ===================================================================

class filename : public ::google::protobuf::Message {
 public:
  filename();
  virtual ~filename();

  filename(const filename& from);

  inline filename& operator=(const filename& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const filename& default_instance();

  void Swap(filename* other);

  // implements Message ----------------------------------------------

  filename* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const filename& from);
  void MergeFrom(const filename& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 uuid = 1;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 1;
  inline ::google::protobuf::uint64 uuid() const;
  inline void set_uuid(::google::protobuf::uint64 value);

  // required string path = 2;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:locofs.filename)
 private:
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uuid_;
  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_loco_2eproto();
  friend void protobuf_AssignDesc_loco_2eproto();
  friend void protobuf_ShutdownFile_loco_2eproto();

  void InitAsDefaultInstance();
  static filename* default_instance_;
};
// -------------------------------------------------------------------

class objectname : public ::google::protobuf::Message {
 public:
  objectname();
  virtual ~objectname();

  objectname(const objectname& from);

  inline objectname& operator=(const objectname& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const objectname& default_instance();

  void Swap(objectname* other);

  // implements Message ----------------------------------------------

  objectname* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const objectname& from);
  void MergeFrom(const objectname& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 suuid = 1;
  inline bool has_suuid() const;
  inline void clear_suuid();
  static const int kSuuidFieldNumber = 1;
  inline ::google::protobuf::uint64 suuid() const;
  inline void set_suuid(::google::protobuf::uint64 value);

  // required uint64 sid = 2;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 2;
  inline ::google::protobuf::uint64 sid() const;
  inline void set_sid(::google::protobuf::uint64 value);

  // required uint64 oid = 3;
  inline bool has_oid() const;
  inline void clear_oid();
  static const int kOidFieldNumber = 3;
  inline ::google::protobuf::uint64 oid() const;
  inline void set_oid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:locofs.objectname)
 private:
  inline void set_has_suuid();
  inline void clear_has_suuid();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_oid();
  inline void clear_has_oid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 suuid_;
  ::google::protobuf::uint64 sid_;
  ::google::protobuf::uint64 oid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_loco_2eproto();
  friend void protobuf_AssignDesc_loco_2eproto();
  friend void protobuf_ShutdownFile_loco_2eproto();

  void InitAsDefaultInstance();
  static objectname* default_instance_;
};
// ===================================================================


// ===================================================================

// filename

// required uint64 uuid = 1;
inline bool filename::has_uuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void filename::set_has_uuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void filename::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void filename::clear_uuid() {
  uuid_ = GOOGLE_ULONGLONG(0);
  clear_has_uuid();
}
inline ::google::protobuf::uint64 filename::uuid() const {
  return uuid_;
}
inline void filename::set_uuid(::google::protobuf::uint64 value) {
  set_has_uuid();
  uuid_ = value;
}

// required string path = 2;
inline bool filename::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void filename::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void filename::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void filename::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& filename::path() const {
  return *path_;
}
inline void filename::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void filename::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void filename::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* filename::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* filename::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void filename::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// objectname

// required uint64 suuid = 1;
inline bool objectname::has_suuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void objectname::set_has_suuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void objectname::clear_has_suuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void objectname::clear_suuid() {
  suuid_ = GOOGLE_ULONGLONG(0);
  clear_has_suuid();
}
inline ::google::protobuf::uint64 objectname::suuid() const {
  return suuid_;
}
inline void objectname::set_suuid(::google::protobuf::uint64 value) {
  set_has_suuid();
  suuid_ = value;
}

// required uint64 sid = 2;
inline bool objectname::has_sid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void objectname::set_has_sid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void objectname::clear_has_sid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void objectname::clear_sid() {
  sid_ = GOOGLE_ULONGLONG(0);
  clear_has_sid();
}
inline ::google::protobuf::uint64 objectname::sid() const {
  return sid_;
}
inline void objectname::set_sid(::google::protobuf::uint64 value) {
  set_has_sid();
  sid_ = value;
}

// required uint64 oid = 3;
inline bool objectname::has_oid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void objectname::set_has_oid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void objectname::clear_has_oid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void objectname::clear_oid() {
  oid_ = GOOGLE_ULONGLONG(0);
  clear_has_oid();
}
inline ::google::protobuf::uint64 objectname::oid() const {
  return oid_;
}
inline void objectname::set_oid(::google::protobuf::uint64 value) {
  set_has_oid();
  oid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace locofs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_loco_2eproto__INCLUDED
