// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: loco.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "loco.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace locofs {

namespace {

const ::google::protobuf::Descriptor* filename_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  filename_reflection_ = NULL;
const ::google::protobuf::Descriptor* objectname_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  objectname_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_loco_2eproto() {
  protobuf_AddDesc_loco_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "loco.proto");
  GOOGLE_CHECK(file != NULL);
  filename_descriptor_ = file->message_type(0);
  static const int filename_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filename, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filename, path_),
  };
  filename_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      filename_descriptor_,
      filename::default_instance_,
      filename_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filename, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filename, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(filename));
  objectname_descriptor_ = file->message_type(1);
  static const int objectname_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(objectname, suuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(objectname, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(objectname, oid_),
  };
  objectname_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      objectname_descriptor_,
      objectname::default_instance_,
      objectname_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(objectname, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(objectname, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(objectname));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_loco_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    filename_descriptor_, &filename::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    objectname_descriptor_, &objectname::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_loco_2eproto() {
  delete filename::default_instance_;
  delete filename_reflection_;
  delete objectname::default_instance_;
  delete objectname_reflection_;
}

void protobuf_AddDesc_loco_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nloco.proto\022\006locofs\"&\n\010filename\022\014\n\004uuid"
    "\030\001 \002(\004\022\014\n\004path\030\002 \002(\t\"5\n\nobjectname\022\r\n\005su"
    "uid\030\001 \002(\004\022\013\n\003sid\030\002 \002(\004\022\013\n\003oid\030\003 \002(\004", 115);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "loco.proto", &protobuf_RegisterTypes);
  filename::default_instance_ = new filename();
  objectname::default_instance_ = new objectname();
  filename::default_instance_->InitAsDefaultInstance();
  objectname::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_loco_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_loco_2eproto {
  StaticDescriptorInitializer_loco_2eproto() {
    protobuf_AddDesc_loco_2eproto();
  }
} static_descriptor_initializer_loco_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int filename::kUuidFieldNumber;
const int filename::kPathFieldNumber;
#endif  // !_MSC_VER

filename::filename()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void filename::InitAsDefaultInstance() {
}

filename::filename(const filename& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void filename::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = GOOGLE_ULONGLONG(0);
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

filename::~filename() {
  SharedDtor();
}

void filename::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void filename::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* filename::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return filename_descriptor_;
}

const filename& filename::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loco_2eproto();
  return *default_instance_;
}

filename* filename::default_instance_ = NULL;

filename* filename::New() const {
  return new filename;
}

void filename::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuid_ = GOOGLE_ULONGLONG(0);
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool filename::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uuid_)));
          set_has_uuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void filename::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uuid(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* filename::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 uuid = 1;
  if (has_uuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uuid(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int filename::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uuid());
    }

    // required string path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void filename::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const filename* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const filename*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void filename::MergeFrom(const filename& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void filename::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void filename::CopyFrom(const filename& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool filename::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void filename::Swap(filename* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata filename::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = filename_descriptor_;
  metadata.reflection = filename_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int objectname::kSuuidFieldNumber;
const int objectname::kSidFieldNumber;
const int objectname::kOidFieldNumber;
#endif  // !_MSC_VER

objectname::objectname()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void objectname::InitAsDefaultInstance() {
}

objectname::objectname(const objectname& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void objectname::SharedCtor() {
  _cached_size_ = 0;
  suuid_ = GOOGLE_ULONGLONG(0);
  sid_ = GOOGLE_ULONGLONG(0);
  oid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

objectname::~objectname() {
  SharedDtor();
}

void objectname::SharedDtor() {
  if (this != default_instance_) {
  }
}

void objectname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* objectname::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return objectname_descriptor_;
}

const objectname& objectname::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_loco_2eproto();
  return *default_instance_;
}

objectname* objectname::default_instance_ = NULL;

objectname* objectname::New() const {
  return new objectname;
}

void objectname::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    suuid_ = GOOGLE_ULONGLONG(0);
    sid_ = GOOGLE_ULONGLONG(0);
    oid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool objectname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 suuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &suuid_)));
          set_has_suuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sid;
        break;
      }

      // required uint64 sid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oid;
        break;
      }

      // required uint64 oid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &oid_)));
          set_has_oid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void objectname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 suuid = 1;
  if (has_suuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->suuid(), output);
  }

  // required uint64 sid = 2;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sid(), output);
  }

  // required uint64 oid = 3;
  if (has_oid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->oid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* objectname::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 suuid = 1;
  if (has_suuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->suuid(), target);
  }

  // required uint64 sid = 2;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sid(), target);
  }

  // required uint64 oid = 3;
  if (has_oid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->oid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int objectname::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 suuid = 1;
    if (has_suuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->suuid());
    }

    // required uint64 sid = 2;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sid());
    }

    // required uint64 oid = 3;
    if (has_oid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->oid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void objectname::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const objectname* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const objectname*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void objectname::MergeFrom(const objectname& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_suuid()) {
      set_suuid(from.suuid());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_oid()) {
      set_oid(from.oid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void objectname::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void objectname::CopyFrom(const objectname& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool objectname::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void objectname::Swap(objectname* other) {
  if (other != this) {
    std::swap(suuid_, other->suuid_);
    std::swap(sid_, other->sid_);
    std::swap(oid_, other->oid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata objectname::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = objectname_descriptor_;
  metadata.reflection = objectname_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace locofs

// @@protoc_insertion_point(global_scope)
